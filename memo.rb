# encoding: UTF-8
class Memo < Post

  #def initialize по умолчанию конструктор класса Memo можно не писать, потому
  # что он совпадает полностью с конструктором родительского класса

  #end

  def read_from_console
  	 # Метод, который спрашивает у пользователя, что он хочет написать в дневнике
    puts "Я сохраню всё, что ты напишешь до строчки \"end\" в файл."

    @text = [] # предварительно сделаем переменную @text массивом. В нем будет
    # все, что набрал пользователь 
    # Объявим переменную, которая будет содержать текущую введенную строку
    line = nil

    # Запустим цикл, пока не дошли до строчки "end",
    while line != "end" do
      # Читаем очередную строку и записываем в массив @text
      line = STDIN.gets.chomp
      @text << line
    end

    # Теперь удалим последний элемент из массива @text – там служебное слово "end"
    @text.pop
  end

  def to_strings

  	# Сперва запишем в блокнот дату и время записи и сделаем отступ
    # \r – специальный дополнительный символ конца строки для Windows
   	time_string = "Создано: #{@created_at.strftime("%Y.%m.%d, %H:%M:%S")} \n\r \n\r"
    #file.puts(time_string + "\n\r")
    return @text.unshift(time_string) # метод unshift добавляет в начало массива строку time_string 

  end

end